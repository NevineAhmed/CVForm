@model CVSubTask.Models.Candidate

@{
    ViewBag.Title = "Edit";
}

@if (ViewBag.msg != null)
{
    <span style="color:lightseagreen">
        @ViewBag.msg
    </span>
}

<h2>Edit</h2>
<link href="//maxcdn.bootstrapcdn.com/bootstrap/3.3.0/css/bootstrap.min.css" rel="stylesheet" id="bootstrap-css">
<script src="//code.jquery.com/jquery-1.11.1.min.js"></script>

<style>

    body {
        background-color: #f5f5f5;
    }

    .imagePreview {
        width: 100%;
        height: 180px;
        background-position: center center;
        background-color: #fff;
        background-size: cover;
        background-repeat: no-repeat;
        display: inline-block;
        box-shadow: 0px -3px 6px 2px rgba(0,0,0,0.2);
    }

    .btn-primary {
        display: block;
        border-radius: 0px;
        box-shadow: 0px 4px 6px 2px rgba(0,0,0,0.2);
        margin-top: -5px;
    }

    .imgUp {
        margin-bottom: 15px;
    }

    .del {
        position: absolute;
        top: 0px;
        right: 15px;
        width: 30px;
        height: 30px;
        text-align: center;
        line-height: 30px;
        background-color: rgba(255,255,255,0.6);
        cursor: pointer;
    }

    .imgAdd {
        width: 30px;
        height: 30px;
        border-radius: 50%;
        background-color: #4bd7ef;
        color: #fff;
        box-shadow: 0px 0px 2px 1px rgba(0,0,0,0.2);
        text-align: center;
        line-height: 30px;
        margin-top: 0px;
        cursor: pointer;
        font-size: 15px;
    }
</style>


@using (Html.BeginForm("Edit", "Candidate", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Candidate</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <div class="col-6">
            <div class="form-group ">
                <br><div class="container">
                    <div class="row">
                        <div class="col-sm-2 imgUp">
                            <div class="imagePreview"></div>
                            <label class="btn btn-primary">
                                Upload<input type="file" class="uploadFile img" value="Upload Photo" name="img" accept="image/*" onchange="ValidateImg()" style="width: 0px;height: 0px;overflow: hidden;">

                            </label>
                            <span id="imageAlert" style="color:red"> </span>
                            @Html.ValidationMessage("ImageError", new { @class = "text-danger" })           @*for server validation*@
                        </div><!-- col-2 -->
                        <i class="fa fa-plus imgAdd"></i>
                    </div><!-- row -->
                </div><!-- container -->
            </div>

        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.FullName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-5">
                @Html.TextBoxFor(model => model.FullName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FullName, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">

            @Html.Label("Gender", htmlAttributes: new { @class = "control-label col-md-2" })

            <div class="col-1">

                <select class="form-control" id="CandidateGender" name="Genders">
                    <option>Male</option>
                    <option>Female</option>
                </select>
            </div>


        </div>

        <div class="form-group">
            @Html.Label("Date of Birth", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-5">
                <input type="date" name="DateOBirth" />
                @Html.ValidationMessage("DateError", new { @class = "text-danger" })
            </div>


        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Area, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.Area, new { htmlAttributes = new { @class = "form-control", Type = "text" } })
                @Html.ValidationMessageFor(model => model.Area, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.City, new { htmlAttributes = new { @class = "form-control", Type = "text" } })
                @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CV, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @* @Html.EditorFor(model => model.CV, new { htmlAttributes = new { @class = "form-control", Type = "file", name = "mohammed" } })*@
                <input type="file" name="cv" accept=".pdf,.docx" onchange="checkSize()" />     @*for client validation*@
                @Html.ValidationMessage("FileError", new { @class = "text-danger" })           @*for server validation*@
                <span id="fileAlert" style="color:red"> </span>
            </div>
        </div>

    </div>



    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-default" />
        </div>
    </div>

}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

<script>

    $(".imgAdd").click(function () {
        $(this).closest(".row").find('.imgAdd').before('<div class="col-sm-2 imgUp"><div class="imagePreview"></div><label class="btn btn-primary">Upload<input type="file" class="uploadFile img" value="Upload Photo" style="width:0px;height:0px;overflow:hidden;"></label><i class="fa fa-times del"></i></div>');
    });
    $(document).on("click", "i.del", function () {
        $(this).parent().remove();
    });
    $(function () {
        $(document).on("change", ".uploadFile", function () {
            var uploadFile = $(this);
            var files = !!this.files ? this.files : [];
            if (!files.length || !window.FileReader) return; // no file selected, or no FileReader support

            if (/^image/.test(files[0].type)) { // only image file
                var reader = new FileReader(); // instance of the FileReader
                reader.readAsDataURL(files[0]); // read the local file

                reader.onloadend = function () { // set image data as background of div
                    //alert(uploadFile.closest(".upimage").find('.imagePreview').length);
                    uploadFile.closest(".imgUp").find('.imagePreview').css("background-image", "url(" + this.result + ")");
                }
            }

        });
    });


    const ValidateImg = () => {
        let img = new Image()
        img.src = window.URL.createObjectURL(event.target.files[0])
        img.onload = () => {

            if ((img.width <= 256 && img.height <= 256)) {
                document.getElementById("imageAlert").innerHTML = "";
                return true;
            }
            else {

                document.getElementById("imageAlert").innerHTML = "Incorrect size not exceed 256x256";
                return true;
            }

        }
    }

    function checkSize() {

        //if (!(document.getElementsByName("cv")[0].value.substr(document.getElementsByName("cv")[0].value.lastIndexOf(".")) === ".pdf" || document.getElementsByName("cv")[0].value.substr(document.getElementsByName("cv")[0].value.lastIndexOf(".")) === ".docx")) {
        //    document.getElementById("fileAlert").innerHTML = "unsupported type, must be PDF or WORD";
        //}


        if (event.target.files[0] != " ") {
            document.getElementById("fileAlert").innerHTML = "";

            if (event.target.files[0].size > 1000000) {
                document.getElementById("fileAlert").innerHTML = "File too big (max 1 MB)";

                return false;
            }
            document.getElementById("fileAlert").innerHTML = "";
            return true;
        }

    }




</script>
<script src="~/Scripts/jquery-3.4.1.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
